{"version":3,"sources":["pages/PriceSetter/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","currentPrice","setCurrentPrice","myPrice","setMyPrice","useEffect","ClipboardJS","className","id","autoFocus","onChange","e","value","target","document","getElementById","button","indexOf","currentPriceString","split","replaceAll","parseFloat","toString","length","i","numbers","substr","operateNumbers","zeros","substring","parseInt","click","focus","style","fontSize","type","display","data-clipboard-target","PriceSetter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8OA6EeA,MA1Ef,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,gCAE2BA,mBAAS,KAFpC,mBAENC,EAFM,KAEQC,EAFR,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,KAkDb,OA9CAC,qBAAU,WACR,IAAIC,IAAY,aACf,IA6CD,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,uBACEC,GAAG,SACHC,WAAS,EACTC,SAjD0D,SAACC,GACjE,IAAMC,EAAQD,EAAEE,OAAOD,MACjBC,EAASC,SAASC,eAAe,UACjCC,EAASF,SAASC,eAAe,UACvC,GAAKF,GAAWG,EAAhB,CAEA,IAAiC,IAA7BJ,EAAMK,QAAQ,UAChB,IACE,IAAMC,EAAqBN,EACxBO,MAAM,UAAU,GAChBA,MAAM,MAAM,GACZC,WAAW,IAAK,IACbnB,EAAeoB,WAAWH,GAChChB,EAAgBD,EAAaqB,YAC7B,IAAInB,EAAU,GACd,IAA6C,GAAzCF,EAAaqB,WAAWL,QAAQ,KAClC,OAAQhB,EAAaqB,WAAWH,MAAM,KAAK,GAAGI,QAC5C,KAAK,EACHpB,GAAWF,EAAe,IAAKqB,WAC/B,MACF,KAAK,EACHnB,GAAWF,EAAe,KAAMqB,eAE/B,CAEL,IADA,IAAIE,EAAI,EAC8B,MAA/BvB,EAAaqB,WAAWE,IAAYA,IAI3C,IAHA,IAAMC,EAAUxB,EAAaqB,WAAWI,OAAO,EAAGF,EAAI,GAClDG,EAAiBF,EAAQH,WACzBM,EAAQ3B,EAAaqB,WAAWH,MAAMM,GAAS,GAC5CE,EAAeJ,OAAS,GAC7BI,GAAkB,IAClBC,EAAQA,EAAMC,UAAU,EAAGD,EAAML,OAAS,GAE5CpB,EAAU2B,SAASH,GAAkB,EAAIC,EACzCxB,EAAWD,EAAQmB,YAErBT,EAAOD,MAAQT,EACf,MAAOQ,IAEXK,EAAOe,QACPlB,EAAOmB,QACPnB,EAAOD,MAAQ,KASTqB,MAAO,CAAEC,SAAU,MAErB,wBACE1B,GAAG,SACH2B,KAAK,SACLF,MAAO,CAAEG,QAAS,QAClBC,wBAAsB,UAJxB,oBAQA,mDAAsBlC,KACtB,2DAA8BF,WC7DvBF,MANf,WACE,OAAO,qBAAKQ,UAAU,MAAf,SACL,cAAC+B,EAAD,OCQWC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpC,SAASC,eAAe,SAM1BwB,M","file":"static/js/main.7f99ca49.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport ClipboardJS from \"clipboard\";\n\nfunction App() {\n  const [message, setMessage] = useState(\"\");\n  const [currentPrice, setCurrentPrice] = useState(\"\");\n  const [myPrice, setMyPrice] = useState(\"\");\n  useEffect(() => {\n    new ClipboardJS(\"#button\");\n  }, []);\n  const inputOnChange: React.ChangeEventHandler<HTMLInputElement> = (e) => {\n    const value = e.target.value;\n    const target = document.getElementById(\"target\") as HTMLInputElement;\n    const button = document.getElementById(\"button\");\n    if (!target || !button) return;\n\n    if (value.indexOf(\" ISK\\t\") !== -1) {\n      try {\n        const currentPriceString = value\n          .split(\" ISK\\t\")[0]\n          .split(\"\\t\")[2]\n          .replaceAll(\",\", \"\");\n        const currentPrice = parseFloat(currentPriceString);\n        setCurrentPrice(currentPrice.toString());\n        let myPrice = \"\";\n        if (currentPrice.toString().indexOf(\".\") != -1) {\n          switch (currentPrice.toString().split(\".\")[1].length) {\n            case 1:\n              myPrice = (currentPrice - 0.1).toString();\n              break;\n            case 2:\n              myPrice = (currentPrice - 0.01).toString();\n          }\n        } else {\n          let i = 3;\n          while (currentPrice.toString()[i] === \"0\") i--;\n          const numbers = currentPrice.toString().substr(0, i + 1);\n          let operateNumbers = numbers.toString();\n          let zeros = currentPrice.toString().split(numbers)[1];\n          while (operateNumbers.length < 4) {\n            operateNumbers += \"0\";\n            zeros = zeros.substring(0, zeros.length - 1);\n          }\n          myPrice = parseInt(operateNumbers) - 1 + zeros;\n          setMyPrice(myPrice.toString());\n        }\n        target.value = myPrice;\n      } catch (e) {}\n    }\n    button.click();\n    target.focus();\n    target.value = \"\";\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <input\n          id=\"target\"\n          autoFocus\n          onChange={inputOnChange}\n          style={{ fontSize: 30 }}\n        />\n        <button\n          id=\"button\"\n          type=\"submit\"\n          style={{ display: \"none\" }}\n          data-clipboard-target=\"#target\"\n        >\n          submit\n        </button>\n        <h3>My Selling Price:{myPrice}</h3>\n        <p>current lowest sell price:{currentPrice}</p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport PriceSetter from \"./pages/PriceSetter\";\n\nfunction App() {\n  return <div className=\"App\">\n    <PriceSetter />\n  </div>;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}